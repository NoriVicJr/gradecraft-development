= render partial: "layouts/alerts", locals: { model: @challenge, term: term_for(:challenge) }

= simple_form_for(@challenge) do |f|
  %section
    %h2 Basic Info

    .form-item
      = f.label :name
      = f.text_field :name, "aria-required": "true"

    .form-item
      = f.label :full_points
      = f.text_field :full_points, data: {autonumeric: true, "m-dec" => "0"}

    .form-item
      = f.input :open_at, as: :string, :input_html => { class: "datetimepicker", :value => @challenge.try(:open_at) }

    .form-item
      = f.input :due_at, as: :string, :include_blank => true, :input_html => { class: "datetimepicker", :value => @challenge.try(:due_at) }

  %section
    %h2 Description

    .textarea
      .form_label What do the #{term_for :teams} need to do to succeed?
      = f.text_area :description, class: "froala"

  %section
    %h2 GradeCraft Settings
    .form-item
      = f.label :visible, "Visible to students?"
      = f.check_box :visible

    .form-item
      = f.label :include_in_timeline, "Timeline"
      = f.check_box :include_in_timeline, {"aria-describedby" => "txtIncludeInTimeline"}
      .form_label{id: "txtIncludeInTimeline"} Can #{term_for :students} see this #{term_for :challenge} in the course timeline? Note that #{term_for :challenges} without open or due dates will be excluded automatically.

    .form-item
      = f.label :release_necessary, "Release necessary?"
      = f.check_box :release_necessary
      .form_label Do you want to release all grades at once? This is particularly useful for situations where extensive feedback is important.


  %section
    %h2 Grade Levels
    .challenge-score-levels
      %p.hint Example: You could create three levels to produce a quick grading scheme for just this #{term_for :challenge} - Complete (5000 points), Finalist (7000 points), and Winner (10,000 points). These levels will then show in the quick grade, and when students are setting goals in the grade predictor.
      %script(id="challenge-score-level-template" type="text/x-template")
        %fieldset.challenge-score-level
          = f.simple_fields_for :challenge_score_levels, ChallengeScoreLevel.new, class: "form-inline", child_index: "child_index" do |slf|
            = render partial: "challenge_score_level_fields", locals: { f: slf }
      - @challenge.challenge_score_levels.each do |challenge_score_level|
        %fieldset.challenge-score-level
          = f.simple_fields_for :challenge_score_levels, challenge_score_level, class: "form-inline" do |slf|
            = render partial: "challenge_score_level_fields", locals: { f: slf }
    %button.add-challenge-score-level Add a Level

  = render partial: "layouts/media_image_form_item", locals: { f: f, model: @challenge }
  
  %section
    %h2 Attachments
    = f.simple_fields_for :challenge_files, @challenge.challenge_files.new do |cf|
      = cf.file_field :file, :multiple => true
    - if @challenge.challenge_files.exists?
      %h5.bold Uploaded files
      %ul.uploaded-files
        - @challenge.challenge_files.each do |cf|
          - next if cf.new_record?
          %li
            - if cf.file_processing
              = "#{cf.filename}"
              %span{tabindex: "0", "aria-describedby": "challenge-file-upload-tip"}
                %i.fa.fa-spinner.fa-fw= "(upload in progress)"
                .display-on-hover.hover-style{role: "tooltip", id: "challenge-file-upload-tip"}
                  Refresh page to confirm upload has completed
            - else
              = link_to cf.filename, cf.url, :target => "_blank"
              = link_to "(Remove)", remove_uploads_path({ :model => "ChallengeFile", challenge_id: @challenge.id, :upload_id => cf.id } )

  .submit-buttons
    %ul
      %li= f.button :submit, "#{@challenge.persisted? ? 'Update' : 'Create'} #{term_for :challenge }"
      %li= link_to glyph("times-circle") + "Cancel", challenges_path, class: "button"
