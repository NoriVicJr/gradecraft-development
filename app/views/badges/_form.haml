= render partial: "layouts/alerts", locals: { model: @badge, term: term_for(:badge) }

= simple_form_for @badge do |f|
  %section

    %h4 Basic Settings

    .form-item
      = f.label :name, "Name"
      = f.text_field :name

    .form-item
      = f.label :full_points, "Points Awarded"
      = f.text_field :full_points, data: {autonumeric: true, "m-dec" => "0"}

    .form-item
      = f.label :file_field, "Icon"
      = f.file_field :icon
      %img{:src => @badge.icon, :width => 80 }

    .form-item
      = f.label :visible
      = f.check_box :visible
      .form_label Can #{term_for :students} see this #{term_for :badge}?

    .form-item
      = f.label :can_earn_multiple_times,"Multi-award"
      = f.check_box :can_earn_multiple_times
      .form_label Can this #{term_for :badge} be given to one #{term_for :student} multiple times through the semester?

    .form-item
      = f.label :student_awardable,"Student-awardable"
      = f.check_box :student_awardable
      .form_label Can this #{term_for :badge} be given by one #{term_for :student} to another #{term_for :student}?

  %section
    %h4 Description

    .textarea
      .form_label Describe what this #{term_for :badge} means, and how it can be earned. Note that if this #{term_for :badge} is marked as visible then this description will also be viewable in the list of #{term_for :badges}.
      = f.text_area :description, class: "froala"

  %section
    %h4 Unlocks
    .unlock-conditions
      %p.hint Unlocks allow you to direct the sequence of content in your course. What do students need to do in order to unlock this #{ term_for :badge }?
      %script(id="unlock-condition-template" type="text/x-template")
        %fieldset.unlock-condition
          = f.simple_fields_for :unlock_conditions, UnlockCondition.new, class: "form-inline", child_index: "child_index" do |ucf|
            = render partial: "layouts/unlock_condition_fields", locals: { f: ucf }
      - @badge.unlock_conditions.each do |condition|
        %fieldset.unlock-condition
          = f.simple_fields_for :unlock_conditions, condition, class: "form-inline" do |ucf|
            = render partial: "layouts/unlock_condition_fields", locals: { f: ucf }
    = link_to "Add a Condition", "#", class: "add-unlock-condition button"

    .unlock-visibility-settings
      %h4 Unlock Visibility Settings
      .form-item
        .locked-visibility-options.form-item-with-options
          = f.label :visible_when_locked, :label => "Visible when Locked"
          = f.check_box :visible_when_locked, {class: "has-conditional-options"}

        %ul.locked-display.visible_elements.conditional-options.indented
          %li.locked-display
            .checkbox
              = f.label :show_name_when_locked, :label => "Show Name when Locked"
              = f.check_box :show_name_when_locked
          %li.locked-display
            .checkbox
              = f.label :show_points_when_locked, :label => "Show Points when Locked"
              = f.check_box :show_points_when_locked
          %li.locked-display
            .checkbox
              = f.label :show_description_when_locked, :label => "Show Description when Locked"
              = f.check_box :show_description_when_locked



  %section
    %h4 Attachments
    .form-item
      = f.simple_fields_for :badge_files, @badge.badge_files.new do |bf|
        = bf.file_field :file, :multiple => true
      - if @badge.badge_files.exists?
        %h5.bold Uploaded files
        %ul.uploaded-files
          - @badge.badge_files.each do |bf|
            - next if bf.new_record?
            %li
              - if bf.file_processing
                = "#{bf.filename}"
                %a
                  %i.fa.fa-spinner.fa-fw= "(upload in progress)"
                .display-on-hover.hover-style
                  Refresh page to confirm upload has completed
              - else
                = link_to bf.filename, bf.url, :target => "_blank"
                = link_to "(Remove)", remove_uploads_path({ :model => "BadgeFile", badge_id: @badge.id, :upload_id => bf.id } )

  .submit-buttons
    %ul
      %li= submit_tag "#{@badge.persisted? ? 'Update' : 'Create'} #{term_for :badge}", class: "button"
      %li= link_to glyph("times-circle") + "Cancel", badges_path, class: "button"
