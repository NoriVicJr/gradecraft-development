%thead
  %tr
    %th
    %th= "#{term_for :assignment}"
    %th Points
    %th Due
    %th
    %th
%tbody
- assignments = assignment_type.assignments.includes(:assignment_type, :unlock_conditions)
- assignments.each do |assignment|
  - grade_instructor_modified_for_assignment = @student.grade_instructor_modified_for_assignment?(assignment)
  - grade = @student.grade_for_assignment(assignment)
  - group = @student.group_for_assignment(assignment)
  - submission = @student.submission_for_assignment(assignment)
  %tr
    %td= render "students/syllabus/assignment_icons", :assignment => assignment
    %td
      = link_to assignment.name, assignment_path(assignment)
      - if ! assignment.name_visible_for_student?(@student)
        = glyph("eye-slash")
    %td
      - if assignment.points_visible_for_student?(@student)
        - if assignment.pass_fail?
          - if grade_instructor_modified_for_assignment
            .bold
              - if grade.pass_fail_status
                = term_for(grade.pass_fail_status)
          - else
            = "#{term_for :pass}/#{term_for :fail}"
        - else
          // Checking to see if this assignment type is student weightable
          - if assignment_type.student_weightable?
            // Checking to see if this student has weighted this assignment anything other than 1
            - if (@student.weight_for_assignment_type(assignment_type) == 0 && current_course.default_assignment_weight != 1) || @student.weight_for_assignment_type(assignment_type) > 1
              - if grade_instructor_modified_for_assignment
                = "#{points grade.raw_score} / #{ points assignment.point_total } points (Raw)"
                .bold= "#{ points grade.score } / #{points grade.point_total} points (Multiplied)"
              - else
                .italic= "#{points grade.point_total} points possible"
            - else
              - if grade_instructor_modified_for_assignment
                .bold= "#{points grade.raw_score} / #{ points grade.point_total } points"
              - else
                .italic= "#{points assignment.point_total} points possible"
          - else
            - if grade_instructor_modified_for_assignment
              .bold
                = "#{points grade.score} / #{points grade.point_total} points earned"
            - else
              .italic= "#{points assignment.point_total} points possible"
    %td
      %span
        - if assignment.future?
          = "#{assignment.due_at.strftime("%A, %b %d, %l:%M%p")}"
    %td
    %td
      .right
        %ul.button-bar

          / Grade Management /
          - if grade_instructor_modified_for_assignment
            %li= link_to glyph(:eye) + "See Results", assignment_grade_path(assignment, :student_id => @student.id), :class => "button"
            - if assignment.is_individual?
              %li= link_to glyph(:edit) + "Edit Grade", edit_assignment_grade_path(assignment.id, :student_id => @student.id), :class => 'button'
            - if assignment.has_groups?
              %li= link_to glyph(:edit) + "Edit Grade", group_grade_assignment_path(assignment, :group_id => group), :class => 'button'
          - else
            - if assignment.is_individual?
              %li= link_to glyph(:check) + "Grade", edit_assignment_grade_path(:assignment_id => assignment.id, :student_id => @student.id), :class => 'button'
            - elsif assignment.has_groups?
              %li= link_to glyph(:check) + "Grade", group_grade_assignment_path(assignment, :group_id => group), :class => 'button'

          / Group Management /
          - if assignment.has_groups?
            - if group.present?
              %li= link_to glyph(:users) + "See #{term_for :group}", group_path(group), :class => "button"
            - else
              %li= link_to glyph(:users) + "Create a #{term_for :group}", new_group_path, :class => "button"

          / Submission Management /
          - if assignment.accepts_submissions? && assignment.is_unlocked_for_student?(@student)
            - if assignment.is_individual?
              - if submission.present?
                %li= link_to glyph("file-o") + "See Submission", assignment_submission_path(assignment, submission.id), :class => 'button'
              - elsif assignment.open?
                %li= link_to glyph(:upload) + "Submit", new_assignment_submission_path(assignment, :student_id => @student), :class => 'button'
            - elsif assignment.has_groups? && group
              - if group.submission_for_assignment(assignment)
                %li= link_to glyph("file-o") + "See Submission", assignment_path(assignment, :anchor => "tab3"), :class => 'button'
              - else
                - if group.approved?
                  %li= link_to glyph(:upload) + "Submit", new_assignment_submission_path(assignment, :group_id => group), :class => 'button'

          / Manual Unlock /
          - if assignment.is_unlockable? && ! assignment.is_unlocked_for_student?(@student)
            %li= link_to glyph("unlock-alt") + "Unlock", manually_unlock_unlock_state_path(:student_id => @student.id, :assignment_id => assignment.id), :method => :post, :class => "button"