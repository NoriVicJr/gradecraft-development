- content_for :context_menu do
  .context_menu
    %ul
      %li= active_course_link_to decorative_glyph(:plus) + "New #{term_for :assignment}", new_assignment_path, class: "button button-edit"
      - if current_course.allows_canvas?
        %li= active_course_link_to decorative_glyph(:download) + "Import #{term_for :assignments}", assignments_importers_path, class: "button button-edit"

.pageContent
  = render partial: "layouts/alerts"

  .assignments{role: "tablist"}
    - @assignment_types.each do |assignment_type|
      .assignment_type{id: "assignment-type-#{assignment_type.id}" }
        .collapse{role: "tab"}
          %h2.assignment-type-name
            %i.fa.fa-angle-double-right.fa-fw
            #{assignment_type.name} â€“ #{points assignment_type.total_points} points
        .collapse-hidden{role: "tabpanel"}
          = active_course_link_to "[ Edit ]", edit_assignment_type_path(assignment_type)
          = active_course_link_to "[ Delete ]", assignment_type_path(assignment_type), data: { confirm: "Are you sure?", method: :delete }
          %table.instructor-assignments.second-row-header{"aria-describedby" => "assignment-type-#{assignment_type.id}"}
            %thead
              %tr
                %td.draggable
                %th{scope: "col", :width => "20%"} Name
                %th.sr-only Icon
                %th Due
                %th{:style => "display: none"} Due Date
                %th{scope: "col", :width => "10%"}  Max Points
                %th Rubric?
                %th{ :style => "min-width: 200px" }
                  %span.sr-only Action Buttons
            %tbody.sort-assignments
              - assignments = assignment_type.assignments.ordered.includes(:rubric, :assignment_type)
              - assignments.each do |assignment|
                %tr{id: "assignment-#{assignment.id}"}
                  %td.draggable
                    %i.fa.fa-arrows-v
                  %td= link_to assignment.name, assignment
                  %td= render partial: "index_icons", locals: { assignment: assignment }
                  %td= assignment.try(:due_at) || "Ongoing"
                  %td{:style => "display: none"}
                    - if assignment.due_at.present?
                      = assignment.try(:due_at).to_formatted_s(:db)
                  - if assignment.pass_fail?
                    %td.foobers= "#{term_for :pass}/#{term_for :fail}"
                  - else
                    %td.doobers= points assignment.full_points
                  %td= "Yes" if assignment.grade_with_rubric?
                  %td
                    .right
                      %ul.button-bar
                        - if !assignment.grade_with_rubric?
                          %li= active_course_link_to decorative_glyph(:check) + "Quick Grade", mass_edit_assignment_grades_path(assignment), class: "button"
                        %li= active_course_link_to decorative_glyph(:edit) + "Edit", edit_assignment_path(assignment), class: "button"
                        %li= active_course_link_to decorative_glyph(:copy) + "Copy", copy_assignments_path(id: assignment), class: "button", :method => :copy
                        %li= active_course_link_to decorative_glyph(:trash) + "Delete", assignment_path(assignment), data: { confirm: "Are you sure?", method: :delete }, class: "button"
          - if current_course.active?
            .box{ style: "width: 95%; margin: 1em auto;"}
              .center
                = active_course_link_to decorative_glyph(:plus) + "Add a New #{term_for :assignment}", new_assignment_path(assignment_type_id: assignment_type.id)

  - if current_course.active?
    .box
      .center
        = active_course_link_to decorative_glyph(:plus) + "Add a New #{term_for :assignment} Type", new_assignment_type_path
