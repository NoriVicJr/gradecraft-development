
// Display top headers for expandable list of assignments.
- @assignment_types.each do |assignment_type|
  .assignment_type{:id => "assignment-type-#{assignment_type.id}" }

    // Display the student's points out of assignment total, if there is an assignment max value. Else
    // display the student's points out of the the current point total for assignment.
    %h3.collapse
      %a
        %i.fa.fa-angle-double-right.fa-fw
      #{assignment_type.try(:name)} â€¢ #{ points assignment_type.visible_score_for_student(current_student) }/#{ points assignment_type.total_points_for_student(current_student) }

    .assignment-type-container
      - if assignment_type.description?
        %p.description= raw assignment_type.description

      // Display the assignments for each assignment type in a responsive table, below header.
      %table.default_assignments_dynatable
        %thead
          %tr
            %th
            %th= "#{term_for :assignment}"
            %th Points
            %th Due
            %th
            %th
        %tbody
          - assignments = assignment_type.assignments.includes(:assignment_type, :unlock_conditions)
          - assignments.each do |assignment|
            - grade_released_for_assignment = current_student.grade_released_for_assignment?(assignment)
            - grade_for_assignment = current_student.grade_for_assignment(assignment)
            - group_for_assignment = @student.group_for_assignment(assignment)
            - student_submission = @student.submission_for_assignment(assignment)
            - if assignment.visible_for_student?(current_student) || grade_released_for_assignment
              %tr
                %td= render "students/syllabus/assignment_icons", :assignment => assignment
                %td
                  - if assignment.name_visible_for_student?(current_student)
                    = link_to assignment.name, assignment_path(assignment)
                %td
                  - if assignment.points_visible_for_student?(current_student)
                    - if assignment.pass_fail?
                      - if current_student.grade_released_for_assignment?(assignment)
                        .bold
                          - if grade_for_assignment.pass_fail_status
                            = term_for(grade_for_assignment.pass_fail_status)
                      - else
                        = "#{term_for :pass}/#{term_for :fail}"
                    - else
                      - grade = grade_for_assignment
                      // Checking to see if this assignment type is student weightable
                      - if assignment.assignment_type.student_weightable?
                        // Checking to see if this student has weighted this assignment anything other than 1
                        - if (current_student.weight_for_assignment_type(assignment.assignment_type) == 0 && current_course.default_assignment_weight != 1) || current_student.weight_for_assignment_type(assignment.assignment_type) > 1
                          - if grade_released_for_assignment
                            = "#{points grade.raw_score} / #{ points assignment.point_total } points (Raw)"
                            .bold= "#{ points grade.score } / #{points grade.point_total} points (Multiplied)"
                          - else
                            .italic= "#{points grade.point_total} points possible"
                        - else
                          - if grade_released_for_assignment
                            .bold= "#{points grade.raw_score} / #{ points grade.point_total } points"
                          - else
                            .italic= "#{points assignment.point_total} points possible"
                      - else
                        - if grade_released_for_assignment
                          .bold
                            = "#{points grade.score} / #{points grade.point_total} points earned"
                        - else
                          .italic= "#{points assignment.point_total} points possible"
                      .bold= "Your Goal: #{points grade.predicted_score}" if grade && grade.predicted_score > 0 && current_user_is_student?
                %td
                  - if assignment.future?
                    %span= "#{assignment.due_at.strftime("%A, %b %d, %l:%M%p")}"
                  - else
                    %span
                %td
                  - if assignment.student_logged? && assignment.open? && current_user_is_student?
                    = render partial: "assignments/self_log_form", locals: { student: @student, assignment: assignment }
                  - else
                    %span
                %td
                  .right
                    %ul.button-bar
                      - if grade_released_for_assignment
                        %li= link_to glyph(:eye) + "See Results", assignment_path(assignment, :anchor => "tab4"), :class => "button"
                      - if assignment.has_groups?
                        - if group_for_assignment.present?
                          %li= link_to glyph(:users) + "See #{term_for :group}", group_path(group_for_assignment), :class => "button"
                          - if assignment.accepts_submissions? && assignment.is_unlocked_for_student?(current_student)
                            - if group_for_assignment && group_for_assignment.submission_for_assignment(assignment)
                              %li= link_to glyph("file-o") + "See Submission", assignment_path(assignment, :anchor => "tab3"), :class => 'button'
                            - else
                              - if group_for_assignment && group_for_assignment.approved?
                                %li= link_to glyph(:upload) + "Submit", new_assignment_submission_path(assignment, :group_id => group_for_assignment), :class => 'button'
                        - else
                          %li= link_to glyph(:users) + "Create a #{term_for :group}", new_group_path, :class => "button"
                      - else
                        - if assignment.accepts_submissions? && assignment.is_unlocked_for_student?(current_student)
                          - if student_submission.present?
                            - if current_user_is_student?
                              %li= link_to glyph("file-o") + "See Submission", assignment_path(assignment, :anchor => "tab3"), :class => 'button'
                            - else
                              %li= link_to glyph("file-o") + "See Submission", assignment_submission_path(assignment, student_submission.id), :class => 'button'
                          - elsif assignment.open?
                            %li= link_to glyph(:upload) + "Submit", new_assignment_submission_path(assignment, :student_id => @student), :class => 'button'
                      - if current_user_is_staff?
                        - grade = grade_for_assignment
                        - if assignment.is_unlockable? && ! assignment.is_unlocked_for_student?(current_student)
                          %li= link_to glyph("unlock-alt") + "Unlock", manually_unlock_unlock_state_path(:student_id => current_student.id, :assignment_id => assignment.id), :method => :post, :class => "button"
                        - if assignment.is_individual?
                          - if grade_released_for_assignment
                            %li= link_to glyph(:edit) + "Edit Grade", edit_assignment_grade_path(assignment.id, :student_id => @student.id), :class => 'button'
                          - else
                            %li= link_to glyph(:check) + "Grade", edit_assignment_grade_path(:assignment_id =>assignment.id, :student_id => @student.id), :class => 'button'
                        - elsif assignment.has_groups?
                          - if grade_released_for_assignment
                            %li= link_to glyph(:edit) + "Edit Grade", group_grade_assignment_path(assignment, :group_id => group_for_assignment), :class => 'button'
                          - else
                            %li= link_to glyph(:check) + "Grade", group_grade_assignment_path(assignment, :group_id => group_for_assignment), :class => 'button'