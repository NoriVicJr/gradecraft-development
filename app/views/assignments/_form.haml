= render partial: "layouts/alerts", locals: { model: presenter.assignment, term: term_for(:assignment) }

= simple_form_for(presenter.assignment, :html => { :novalidate => true }) do |f|
  %section
    %h2 Basic Info
    .form-item
      = f.association :assignment_type, collection: current_course.assignment_types.ordered, value_method: :id, include_blank: true, selected: params[:assignment_type_id] || presenter.assignment.assignment_type_id, "aria-required": "true"

    .form-item
      = f.label :name
      = f.text_field :name, "aria-required": "true"

    .form-item
      .pass-fail-toggle
        .switch
          = f.label :pass_fail, "Pass/Fail"
          = f.check_box :pass_fail

    .form-item
      - if f.object.pass_fail?
        .pass-fail-contingent.hidden
          = f.label :full_points, "Total Points Possible"
          = f.text_field :full_points
      - else
        .pass-fail-contingent
          = f.label :full_points, "Total Points Possible"
          = f.text_field :full_points

    .form-item
      - if f.object.pass_fail?
        .pass-fail-contingent.hidden
          = f.label :threshold_points, "Points Threshold"
          = f.text_field :threshold_points
          .form_label If you set a points threshold above zero, any student earning fewer points will receive no points for the assignment.
      - else
        .pass-fail-contingent
          = f.label :threshold_points, "Points Threshold"
          = f.text_field :threshold_points
          .form_label If you set a points threshold above zero, any student earning fewer points will receive no points for the assignment.

    .form-item
      = f.input :open_at, as: :string, :include_blank => true, :input_html => { class: "datetimepicker" }

    .form-item
      = f.input :due_at, as: :string, :include_blank => true, :input_html => { class: "datetimepicker" }

    .form-item
      = f.input :accepts_submissions_until, as: :string, :include_blank => true, :input_html => { class: "datetimepicker" }, :label => "Accept until"
      .form_label If you set a due date but no accept-until date, submissions and self-logged grades will be marked as late but always accepted.

    .form-item
      = f.label :grade_scope, "Individual or Group?"
      = f.select :grade_scope, [["Individual"], ["Group"]]
      .form_label Do students do this individually or as a group?

    .form-item
      = f.input :min_group_size, as: :numeric, :input_html => { :value => [ @assignment.try(:min_group_size) || 2 ] }

    .form-item
      = f.input :max_group_size, as: :numeric, :input_html => {  :value => [ @assignment.try(:max_group_size) || 5 ] }

    .form-item
      = f.label :mass_grade_type, "Quick Grade Style"
      = f.select :mass_grade_type, [[],["Checkbox"], ["Select List"], ["Radio Buttons"], ["Text"]]
      .form_label How should this assignment appear in Quick Grade?

  %section
    %h2 Assignment Description
    .textarea
      .form_label This will be shown to students on their dashboard, and when they submit their assignment.
      = f.text_area :description, class: "froala"

  %section
    %h2 Assignment Purpose
    .textarea
      .form_label This will be shown to students on their dashboard, and when they submit their assignment.
      = f.text_area :purpose, class: "froala"

  %section
    %h2= "Advanced Settings"

    .form-item
      = f.label :visible, "Visible to students"
      = f.check_box :visible
      .form_label Can #{term_for :students} see this #{term_for :assignment} in their dashboard?

    .form-item
      = f.label :required
      = f.check_box :required
      .form_label Are ALL #{term_for :students} expected to complete this #{term_for :assignment} to pass the course?

    .form-item
      .assignment_options.form-item-with-options
        = f.label :accepts_submissions #{term_for :assignment} Submissions
        = f.check_box :accepts_submissions, {class: "has-conditional-options"}
        .form_label Will you be using GradeCraft to accept submissions for this #{term_for :assignment}?

      %ul.submit.accepts_submission_types.conditional-options.indented
        %li.submit
          .checkbox
            = f.label :accepts_links, :label => "Accept Links"
            = f.check_box :accepts_links
        %li.submit
          .checkbox
            = f.label :accepts_attachments, :label => "Accept Uploads/Attachments"
            = f.check_box :accepts_attachments
        %li.submit
          .checkbox
            = f.label :accepts_text, :label => "Accept raw text"
            = f.check_box :accepts_text

    .form-item
      = f.label :resubmissions_allowed #{term_for :assignment} Resubmissions
      = f.check_box :resubmissions_allowed
      .form_label Can #{term_for :students} resubmit this #{term_for :assignment}?

    .form-item
      = f.label :release_necessary
      = f.check_box :release_necessary
      .form_label Do you want to release all grades at once? This is particularly useful for situations where extensive feedback is important.

    .form-item
      = f.label :include_in_timeline, "Timeline"
      = f.check_box :include_in_timeline, {"aria-describedby" => "txtIncludeInTimeline"}
      .form_label{id: "txtIncludeInTimeline"} Can #{term_for :students} see this #{term_for :assignment} in the course timeline? Note that #{term_for :assignments} without open or due dates will be excluded automatically.

    .form-item
      = f.label :include_in_predictor, "Predictor"
      = f.check_box :include_in_predictor
      .form_label Can #{term_for :students} see this #{term_for :assignment} in the grade predictor?

    .form-item
      = f.label :include_in_to_do, "Due this Week"
      = f.check_box :include_in_to_do
      .form_label Can #{term_for :students} see this #{term_for :assignment} in the "Course Events" panel?

    - if current_course.show_analytics?
      .form-item
        = f.label :hide_analytics, "Hide Analytics?"
        = f.check_box :hide_analytics, {"aria-describedby" => "hideAnalytics"}
        .form_label{id: "hideAnalytics"}  Do you want to hide comparative assignment analytics from students for this assignment?

    .form-item
      = f.label :student_logged
      = f.check_box :student_logged
      .form_label Do #{term_for :students} self-report their grade for this #{term_for :assignment}? If you add grade levels below, they'll be able to select their self-assessed score from the list during the open time period. If you don't, they'll be able to select that they did the work and earn full points.

  %section
    %h2 Unlocks

    .unlock-conditions
      %p.hint Unlocks allow you to direct the sequence of content in your course. What do students need to do in order to unlock this #{ term_for :assignment }?
      %script(id="unlock-condition-template" type="text/x-template")
        %fieldset.unlock-condition
          = f.simple_fields_for :unlock_conditions, UnlockCondition.new, class: "form-inline", child_index: "child_index" do |ucf|
            = render partial: "layouts/unlock_condition_fields", locals: { f: ucf }
      - presenter.assignment.unlock_conditions.each do |condition|
        %fieldset.unlock-condition
          = f.simple_fields_for :unlock_conditions, condition, class: "form-inline" do |ucf|
            = render partial: "layouts/unlock_condition_fields", locals: { f: ucf }
    %button.add-unlock-condition Add a Condition

    .unlock-visibility-settings
      %h3 Unlock Visibility Settings
      .locked-visibility-options.form-item-with-options
        = f.label :visible_when_locked, :label => "Visible when Locked"
        = f.check_box :visible_when_locked, {class: "has-conditional-options"}

      %ul.locked-display.visible_elements.conditional-options.indented
        %li.locked-display
          .checkbox
            = f.label :show_name_when_locked, :label => "Show Name when Locked"
            = f.check_box :show_name_when_locked
        %li.locked-display
          .checkbox
            = f.label :show_points_when_locked, :label => "Show Points when Locked"
            = f.check_box :show_points_when_locked
        %li.locked-display
          .checkbox
            = f.label :show_description_when_locked, :label => "Show Description when Locked"
            = f.check_box :show_description_when_locked
        %li.locked-display
          .checkbox
            = f.label :show_purpose_when_locked, :label => "Show Purpose when Locked"
            = f.check_box :show_purpose_when_locked

  %section
    %h2 Grade Levels
    .assignment-score-levels
      %p.hint Example: You could create three levels to produce a quick grading scheme for just this #{term_for :assignment} - Complete (5000 points), Finalist (7000 points), and Winner (10,000 points). These levels will then show in the quick grade, and when students are setting goals in the grade predictor.
      %script(id="assignment-score-level-template" type="text/x-template")
        %fieldset.assignment-score-level
          = f.simple_fields_for :assignment_score_levels, AssignmentScoreLevel.new, class: "form-inline", child_index: "child_index" do |slf|
            = render partial: "assignment_score_level_fields", locals: { f: slf }
      - presenter.assignment.assignment_score_levels.order_by_points.each do |assignment_score_level|
        %fieldset.assignment-score-level
          = f.simple_fields_for :assignment_score_levels, assignment_score_level, class: "form-inline" do |slf|
            = render partial: "assignment_score_level_fields", locals: { f: slf }
    %button.add-assignment-score-level Add a Level

  %section
    %h2 Attachments
    = f.simple_fields_for :assignment_files, presenter.assignment.assignment_files.new do |af|
      = af.file_field :file, :multiple => true
    - if presenter.assignment.assignment_files.exists?
      %h5.bold Uploaded files
      %ul.uploaded-files
        - presenter.assignment.assignment_files.each do |af|
          - next if af.new_record?
          %li
            - if af.file_processing
              = "#{af.filename}"
              %span{tabindex: "0", "aria-describedby": "upload-process-tip"}
                %i.fa.fa-spinner.fa-fw= "(upload in progress)"
              .display-on-hover.hover-style{role: "tooltip", :id=> "upload-process-tip"}
                Refresh page to confirm upload has completed
            - else
              = link_to af.filename, af.url, :target => "_blank"
              = link_to "(Remove)", remove_uploads_path({ :model => "AssignmentFile", assignment_id: presenter.assignment.id, :upload_id => af.id } )
  .submit-buttons
    %ul
      %li= f.button :submit, "#{presenter.assignment.persisted? ? 'Update' : 'Create'} #{term_for :assignment}"
      %li= link_to glyph("times-circle") + "Cancel", assignments_path, class: "button"
