= render partial: "students/table_filter"

%table#student-index-table.no-table-header
  %caption.sr-only= "#{term_for :students}"
  %thead
    %tr
      %th Flag
      %th Rank
      %th Avatar
      %th First Name
      %th Last Name
      %th= "Pseudonym" if presenter.display_pseudonyms?
      - if presenter.has_teams?
        %th= "#{presenter.course.team_term}"
        %th= "Role" if presenter.has_team_roles?
      %th{scope: "col"} Score
      %th Level
      - if presenter.has_badges?
        %th #{ term_for :badges }
        %th{style: "display: none"} Badge Count
      %th Last Activity
      %th{style: "display: none"} Active
      %th.options Options
  %tbody
    - index = 0
    - presenter.students.each_with_index do |student|
      %tr
        %td
          = div_for student do
            = link_to flagged_users_icon(presenter.flagged_users, student.id), flag_user_path(student), method: :post, remote: true, class: "flagged-user-icon"
          %span{ class: student.auditing? ? "auditor" : "graded" }
        %td= index += 1 if !student.auditing? && student.course_membership.active?
        %td
          - if student.avatar_file_name.present?
            %img.img-rounded{ :src => student.avatar_file_name, :width => 30 }
        %td= link_to student.first_name, student_path(student)
        %td= link_to student.last_name, student_path(student)
        %td= student.display_name(current_course) if presenter.display_pseudonyms?
        - if presenter.has_teams?
          %td
            = link_to student.team.name, team_path(id: student.team.id) if student.team
          %td= student.team_role(current_course) if presenter.has_team_roles?
        %td= points student.score
        %td= student.grade_scheme.try(:name)
        - if presenter.has_badges?
          %td#earned_badges{"data-title" => "Badges"}
            - student.earned_badges.each do |badge|
              %img{:src => badge.icon, :alt => badge.name, :width => "20", :title => badge.name}
          %td{ style: "display: none" }= student.earned_badges.count
        %td
          - if student.last_activity_at.present?
            = student.last_activity_at.in_time_zone(current_user.time_zone)
          - else
            (never)
        %td= student.course_activated?
        %td
          .button-container.dropdown
            %button.button-edit.button-options{role: "button", type: "button", "aria-label": "Additional Options"}= decorative_glyph(:cog) + decorative_glyph("caret-down")
            %ul.options-menu.dropdown-content
              %li= link_to decorative_glyph(:eye) + "Preview as this student", student_preview_path(student)
              %li= mail_to student.email, glyph(:envelope) + "Email"
              = active_course_link_to decorative_glyph(:edit) + "Edit", edit_user_path(student)
              - if student.course_activated?
                = active_course_link_to decorative_glyph("user-times") + "Deactivate", deactivate_course_membership_path(student.course_membership), data: { confirm: "This will deactivate #{student.name} from your course - are you sure?" }, :method => :put
              - else
                = active_course_link_to decorative_glyph(:flash) + "Reactivate", reactivate_course_membership_path(student.course_membership), :method => :put
              - if student.deleteable?
                = active_course_link_to decorative_glyph(:trash) + "Delete", student.course_membership, data: { confirm: "This will delete #{student.name} from your course - are you sure?" }, :method => :delete
              - if current_user_is_admin? && !student.activated?
                = active_course_link_to decorative_glyph(:check) + "Activate Account", manually_activate_user_path(student.id), :method => :put
                = active_course_link_to glyph(:envelope) + "Resend Invite Email", resend_invite_email_user_path(student.id)
